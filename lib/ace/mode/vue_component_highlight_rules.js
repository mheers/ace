/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from tool/vue.tmLanguage (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/

define(function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var VueComponentHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = {
        start: [{
            include: "#vue-interpolations"
        }, {
            token: [
                "punctuation.definition.tag.begin.html",
                "entity.name.tag.html"
            ],
            regex: /(<)([a-zA-Z0-9:-]+)(?=[^>]*><\/\2>)/,
            push: [{
                token: [
                    "punctuation.definition.tag.end.html",
                    "punctuation.definition.tag.begin.html meta.scope.between-tag-pair.html",
                    "punctuation.definition.tag.begin.html",
                    "entity.name.tag.html",
                    "punctuation.definition.tag.end.html"
                ],
                regex: /(>)(<)(\/)([a-zA-Z0-9:-]+)(>)/,
                next: "pop"
            }, {
                include: "#tag-stuff"
            }, {
                defaultToken: "meta.tag.any.html"
            }]
        }, {
            token: [
                "punctuation.definition.tag.html",
                "entity.name.tag.xml.html"
            ],
            regex: /(<\?)(xml)/,
            push: [{
                token: "punctuation.definition.tag.html",
                regex: /\?>/,
                next: "pop"
            }, {
                include: "#tag-generic-attribute"
            }, {
                include: "#string-double-quoted"
            }, {
                include: "#string-single-quoted"
            }, {
                defaultToken: "meta.tag.preprocessor.xml.html"
            }]
        }, {
            token: "punctuation.definition.comment.html",
            regex: /<!--/,
            push: [{
                token: "punctuation.definition.comment.html",
                regex: /--\s*>/,
                next: "pop"
            }, {
                token: "invalid.illegal.bad-comments-or-CDATA.html",
                regex: /--/
            }, {
                defaultToken: "comment.block.html"
            }]
        }, {
            token: "punctuation.definition.tag.html",
            regex: /<!/,
            push: [{
                token: "punctuation.definition.tag.html",
                regex: />/,
                next: "pop"
            }, {
                token: [],
                regex: /DOCTYPE/,
                caseInsensitive: true,
                push: [{
                    token: [],
                    regex: /(?=>)/,
                    next: "pop"
                }, {
                    token: "string.quoted.double.doctype.identifiers-and-DTDs.html",
                    regex: /"[^">]*"/
                }, {
                    defaultToken: "meta.tag.sgml.doctype.html"
                }]
            }, {
                token: "constant.other.inline-data.html",
                regex: /\[CDATA\[/,
                push: [{
                    token: "constant.other.inline-data.html",
                    regex: /]](?=>)/,
                    next: "pop"
                }, {
                    defaultToken: "constant.other.inline-data.html"
                }]
            }, {
                token: "invalid.illegal.bad-comments-or-CDATA.html",
                regex: /\s*(?!--|>)\S\s*/
            }, {
                defaultToken: "meta.tag.sgml.html"
            }]
        }, {
            token: [
                "punctuation.definition.tag.begin.html",
                "entity.name.tag.style.html",
                "text.slm.embedded.html",
                "punctuation.definition.tag.html",
                "text.slm.embedded.html"
            ],
            regex: /(?:^\s+)?(<)(template)\b([^>]*lang=)(['"])(slm\1?)/,
            caseInsensitive: true,
            push: [{
                token: [
                    "punctuation.definition.tag.begin.html",
                    "entity.name.tag.style.html",
                    "punctuation.definition.tag.html"
                ],
                regex: /(<\/)(template)(>)(?:\s*$)?/,
                caseInsensitive: true,
                next: "pop"
            }, {
                include: "#tag-stuff"
            }, {
                token: "punctuation.definition.tag.end.html",
                regex: />/,
                push: [{
                    token: "text",
                    regex: /(?=<\/template)/,
                    caseInsensitive: true,
                    next: "pop"
                }, {
                    include: "text.slm"
                }]
            }, {
                defaultToken: "text.slm.embedded.html"
            }]
        }, {
            token: [
                "punctuation.definition.tag.begin.html",
                "entity.name.tag.style.html",
                "text.jade.embedded.html",
                "punctuation.definition.tag.html",
                "text.jade.embedded.html"
            ],
            regex: /(?:^\s+)?(<)(template)\b([^>]*lang=)(['"])(jade\1?)/,
            caseInsensitive: true,
            push: [{
                token: [
                    "punctuation.definition.tag.begin.html",
                    "entity.name.tag.style.html",
                    "punctuation.definition.tag.html"
                ],
                regex: /(<\/)(template)(>)(?:\s*$)?/,
                caseInsensitive: true,
                next: "pop"
            }, {
                include: "#tag-stuff"
            }, {
                token: "punctuation.definition.tag.end.html",
                regex: />/,
                push: [{
                    token: "text",
                    regex: /(?=<\/template)/,
                    caseInsensitive: true,
                    next: "pop"
                }, {
                    include: "text.jade"
                }]
            }, {
                defaultToken: "text.jade.embedded.html"
            }]
        }, {
            token: [
                "punctuation.definition.tag.begin.html",
                "entity.name.tag.style.html",
                "text.pug.embedded.html",
                "punctuation.definition.tag.html",
                "text.pug.embedded.html"
            ],
            regex: /(?:^\s+)?(<)(template)\b([^>]*lang=)(['"])(pug\1?)/,
            caseInsensitive: true,
            push: [{
                token: [
                    "punctuation.definition.tag.begin.html",
                    "entity.name.tag.style.html",
                    "punctuation.definition.tag.html"
                ],
                regex: /(<\/)(template)(>)(?:\s*$)?/,
                caseInsensitive: true,
                next: "pop"
            }, {
                include: "#tag-stuff"
            }, {
                token: "punctuation.definition.tag.end.html",
                regex: />/,
                push: [{
                    token: "text",
                    regex: /(?=<\/template)/,
                    caseInsensitive: true,
                    next: "pop"
                }, {
                    include: "text.pug"
                }]
            }, {
                defaultToken: "text.pug.embedded.html"
            }]
        }, {
            token: [
                "punctuation.definition.tag.begin.html",
                "entity.name.tag.style.html",
                "source.stylus.embedded.html",
                "punctuation.definition.tag.html",
                "source.stylus.embedded.html"
            ],
            regex: /(?:^\s+)?(<)(style)\b([^>]*lang=)(['"])(stylus\1?)/,
            caseInsensitive: true,
            push: [{
                token: [
                    "punctuation.definition.tag.begin.html",
                    "entity.name.tag.style.html",
                    "punctuation.definition.tag.html"
                ],
                regex: /(<\/)(style)(>)(?:\s*$)?/,
                caseInsensitive: true,
                next: "pop"
            }, {
                include: "#tag-stuff"
            }, {
                token: "punctuation.definition.tag.end.html",
                regex: />/,
                push: [{
                    token: "text",
                    regex: /(?=<\/style)/,
                    caseInsensitive: true,
                    next: "pop"
                }, {
                    include: "source.stylus"
                }]
            }, {
                defaultToken: "source.stylus.embedded.html"
            }]
        }, {
            token: [
                "punctuation.definition.tag.begin.html",
                "entity.name.tag.style.html",
                "source.postcss.embedded.html",
                "punctuation.definition.tag.html",
                "source.postcss.embedded.html"
            ],
            regex: /(?:^\s+)?(<)(style)\b([^>]*lang=)(['"])(postcss\1?)/,
            caseInsensitive: true,
            push: [{
                token: [
                    "punctuation.definition.tag.begin.html",
                    "entity.name.tag.style.html",
                    "punctuation.definition.tag.html"
                ],
                regex: /(<\/)(style)(>)(?:\s*$)?/,
                caseInsensitive: true,
                next: "pop"
            }, {
                include: "#tag-stuff"
            }, {
                token: "punctuation.definition.tag.end.html",
                regex: />/,
                push: [{
                    token: "text",
                    regex: /(?=<\/style)/,
                    caseInsensitive: true,
                    next: "pop"
                }, {
                    include: "source.postcss"
                }]
            }, {
                defaultToken: "source.postcss.embedded.html"
            }]
        }, {
            token: [
                "punctuation.definition.tag.begin.html",
                "entity.name.tag.style.html",
                "source.sass.embedded.html",
                "punctuation.definition.tag.html",
                "source.sass.embedded.html"
            ],
            regex: /(?:^\s+)?(<)(style)\b([^>]*lang=)(['"])(sass\1?)/,
            caseInsensitive: true,
            push: [{
                token: [
                    "punctuation.definition.tag.begin.html",
                    "entity.name.tag.style.html",
                    "punctuation.definition.tag.html"
                ],
                regex: /(<\/)(style)(>)(?:\s*$)?/,
                caseInsensitive: true,
                next: "pop"
            }, {
                include: "#tag-stuff"
            }, {
                token: "punctuation.definition.tag.end.html",
                regex: />/,
                push: [{
                    token: "text",
                    regex: /(?=<\/style)/,
                    caseInsensitive: true,
                    next: "pop"
                }, {
                    include: "source.sass"
                }]
            }, {
                defaultToken: "source.sass.embedded.html"
            }]
        }, {
            token: [
                "punctuation.definition.tag.begin.html",
                "entity.name.tag.style.html",
                "source.scss.embedded.html",
                "punctuation.definition.tag.html",
                "source.scss.embedded.html"
            ],
            regex: /(?:^\s+)?(<)(style)\b([^>]*lang=)(['"])(scss\1?)/,
            caseInsensitive: true,
            push: [{
                token: [
                    "punctuation.definition.tag.begin.html",
                    "entity.name.tag.style.html",
                    "punctuation.definition.tag.html"
                ],
                regex: /(<\/)(style)(>)(?:\s*$)?/,
                caseInsensitive: true,
                next: "pop"
            }, {
                include: "#tag-stuff"
            }, {
                token: "punctuation.definition.tag.end.html",
                regex: />/,
                push: [{
                    token: "text",
                    regex: /(?=<\/style)/,
                    caseInsensitive: true,
                    next: "pop"
                }, {
                    include: "source.css.scss"
                }]
            }, {
                defaultToken: "source.scss.embedded.html"
            }]
        }, {
            token: [
                "punctuation.definition.tag.begin.html",
                "entity.name.tag.style.html",
                "source.less.embedded.html",
                "punctuation.definition.tag.html",
                "source.less.embedded.html"
            ],
            regex: /(?:^\s+)?(<)(style)\b([^>]*lang=)(['"])(less\1?)/,
            caseInsensitive: true,
            push: [{
                token: [
                    "punctuation.definition.tag.begin.html",
                    "entity.name.tag.style.html",
                    "punctuation.definition.tag.html"
                ],
                regex: /(<\/)(style)(>)(?:\s*$)?/,
                caseInsensitive: true,
                next: "pop"
            }, {
                include: "#tag-stuff"
            }, {
                token: "punctuation.definition.tag.end.html",
                regex: />/,
                push: [{
                    token: "text",
                    regex: /(?=<\/style)/,
                    caseInsensitive: true,
                    next: "pop"
                }, {
                    include: "source.css.less"
                }]
            }, {
                defaultToken: "source.less.embedded.html"
            }]
        }, {
            token: [
                "punctuation.definition.tag.begin.html",
                "entity.name.tag.style.html"
            ],
            regex: /(?:^\s+)?(<)(style)\b(?![^>]*\/>)/,
            caseInsensitive: true,
            push: [{
                token: [
                    "punctuation.definition.tag.begin.html",
                    "entity.name.tag.style.html",
                    "punctuation.definition.tag.html"
                ],
                regex: /(<\/)(style)(>)(?:\s*$)?/,
                caseInsensitive: true,
                next: "pop"
            }, {
                include: "#tag-stuff"
            }, {
                token: "punctuation.definition.tag.end.html",
                regex: />/,
                push: [{
                    token: "text",
                    regex: /(?=<\/style)/,
                    caseInsensitive: true,
                    next: "pop"
                }, {
                    include: "source.css"
                }]
            }, {
                defaultToken: "source.css.embedded.html"
            }]
        }, {
            token: [
                "punctuation.definition.tag.begin.html",
                "entity.name.tag.script.html"
            ],
            regex: /(?:^\s+)?(<)(script)\b(?=[^>]*lang=['"]ts\1?)/,
            caseInsensitive: true,
            push: [{
                token: "punctuation.definition.tag.html",
                regex: /(?<=<\/(?:script|SCRIPT))>(?:\s*$)?/,
                next: "pop"
            }, {
                include: "#tag-stuff"
            }, {
                token: "punctuation.definition.tag.begin.html",
                regex: /(?<!<\/(?:script|SCRIPT))>/,
                push: [{
                    token: [
                        "punctuation.definition.tag.begin.html",
                        "entity.name.tag.script.html"
                    ],
                    regex: /(<\/)(script)/,
                    caseInsensitive: true,
                    next: "pop"
                }, {
                    include: "source.ts"
                }]
            }, {
                defaultToken: "source.ts.embedded.html"
            }]
        }, {
            token: [
                "punctuation.definition.tag.begin.html",
                "entity.name.tag.script.html"
            ],
            regex: /(?:^\s+)?(<)(script)\b(?=[^>]*lang=['"]coffee\1?)/,
            caseInsensitive: true,
            push: [{
                token: "punctuation.definition.tag.html",
                regex: /(?<=<\/(?:script|SCRIPT))>(?:\s*$)?/,
                next: "pop"
            }, {
                include: "#tag-stuff"
            }, {
                token: "punctuation.definition.tag.begin.html",
                regex: /(?<!<\/(?:script|SCRIPT))>/,
                push: [{
                    token: [
                        "punctuation.definition.tag.begin.html",
                        "entity.name.tag.script.html"
                    ],
                    regex: /(<\/)(script)/,
                    caseInsensitive: true,
                    next: "pop"
                }, {
                    include: "source.coffee"
                }]
            }, {
                defaultToken: "source.coffee.embedded.html"
            }]
        }, {
            token: [
                "punctuation.definition.tag.begin.html",
                "entity.name.tag.script.html"
            ],
            regex: /(?:^\s+)?(<)(script)\b(?=[^>]*lang=['"]livescript\1?)/,
            caseInsensitive: true,
            push: [{
                token: "punctuation.definition.tag.html",
                regex: /(?<=<\/(?:script|SCRIPT))>(?:\s*$)?/,
                next: "pop"
            }, {
                include: "#tag-stuff"
            }, {
                token: "punctuation.definition.tag.begin.html",
                regex: /(?<!<\/(?:script|SCRIPT))>/,
                push: [{
                    token: [
                        "punctuation.definition.tag.begin.html",
                        "entity.name.tag.script.html"
                    ],
                    regex: /(<\/)(script)/,
                    caseInsensitive: true,
                    next: "pop"
                }, {
                    include: "source.livescript"
                }]
            }, {
                defaultToken: "source.livescript.embedded.html"
            }]
        }, {
            token: [
                "punctuation.definition.tag.begin.html",
                "entity.name.tag.script.html"
            ],
            regex: /(<)(script)\b(?![^>]*\/>)(?![^>]*type.?=.?text\/(?!javascript|babel|ecmascript).*)/,
            caseInsensitive: true,
            push: [{
                token: "punctuation.definition.tag.html",
                regex: /(?<=<\/(?:script|SCRIPT))>(?:\s*$)?/,
                next: "pop"
            }, {
                include: "#tag-stuff"
            }, {
                token: "punctuation.definition.tag.begin.html",
                regex: /(?<!<\/(?:script|SCRIPT))>/,
                push: [{
                    token: [
                        "punctuation.definition.tag.begin.html",
                        "entity.name.tag.script.html"
                    ],
                    regex: /(<\/)(script)/,
                    caseInsensitive: true,
                    next: "pop"
                }, {
                    token: [
                        "punctuation.definition.comment.js",
                        "comment.line.double-slash.js",
                        "comment.line.double-slash.js"
                    ],
                    regex: /(\/\/)(.*?)((?=<\/script)|$)/
                }, {
                    token: "punctuation.definition.comment.js",
                    regex: /\/\*/,
                    push: [{
                        token: "punctuation.definition.comment.js",
                        regex: /\*\/|(?=<\/script)/,
                        next: "pop"
                    }, {
                        defaultToken: "comment.block.js"
                    }]
                }, {
                    include: "source.js"
                }]
            }, {
                defaultToken: "source.js.embedded.html"
            }]
        }, {
            token: [
                "punctuation.definition.tag.begin.html",
                "entity.name.tag.structure.any.html"
            ],
            regex: /(<\/?)((?:body|head|html)\b)/,
            caseInsensitive: true,
            push: [{
                token: "punctuation.definition.tag.end.html",
                regex: />/,
                next: "pop"
            }, {
                include: "#tag-stuff"
            }, {
                defaultToken: "meta.tag.structure.any.html"
            }]
        }, {
            token: [
                "punctuation.definition.tag.begin.html",
                "entity.name.tag.block.any.html"
            ],
            regex: /(<\/?)((?:address|blockquote|dd|div|dl|dt|fieldset|form|frame|frameset|h1|h2|h3|h4|h5|h6|iframe|noframes|object|ol|p|ul|applet|center|dir|hr|menu|pre)\b)/,
            caseInsensitive: true,
            push: [{
                token: "punctuation.definition.tag.end.html",
                regex: />/,
                next: "pop"
            }, {
                include: "#tag-stuff"
            }, {
                defaultToken: "meta.tag.block.any.html"
            }]
        }, {
            token: [
                "punctuation.definition.tag.begin.html",
                "entity.name.tag.inline.any.html"
            ],
            regex: /(<\/?)((?:a|abbr|acronym|area|b|base|basefont|bdo|big|br|button|caption|cite|code|col|colgroup|del|dfn|em|font|head|html|i|img|input|ins|isindex|kbd|label|legend|li|link|map|meta|noscript|optgroup|option|param|q|s|samp|script|select|small|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|title|tr|tt|u|var)\b)/,
            caseInsensitive: true,
            push: [{
                token: "punctuation.definition.tag.end.html",
                regex: /(?: ?\/)?>/,
                next: "pop"
            }, {
                include: "#tag-stuff"
            }, {
                defaultToken: "meta.tag.inline.any.html"
            }]
        }, {
            token: [
                "punctuation.definition.tag.begin.html",
                "entity.name.tag.other.html"
            ],
            regex: /(<\/?)([a-zA-Z0-9:-]+)/,
            push: [{
                token: "punctuation.definition.tag.end.html",
                regex: />/,
                next: "pop"
            }, {
                include: "#tag-stuff"
            }, {
                defaultToken: "meta.tag.other.html"
            }]
        }, {
            include: "#entities"
        }, {
            token: "invalid.illegal.incomplete.html",
            regex: /<>/
        }, {
            token: "invalid.illegal.bad-angle-bracket.html",
            regex: /</
        }],
        "#entities": [{
            token: [
                "punctuation.definition.entity.html",
                "constant.character.entity.html",
                "punctuation.definition.entity.html"
            ],
            regex: /(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)/
        }, {
            token: "invalid.illegal.bad-ampersand.html",
            regex: /&/
        }],
        "#string-double-quoted": [{
            token: "punctuation.definition.string.begin.html",
            regex: /"/,
            push: [{
                token: "punctuation.definition.string.end.html",
                regex: /"/,
                next: "pop"
            }, {
                include: "#vue-interpolations"
            }, {
                include: "#entities"
            }, {
                defaultToken: "string.quoted.double.html"
            }]
        }],
        "#string-single-quoted": [{
            token: "punctuation.definition.string.begin.html",
            regex: /'/,
            push: [{
                token: "punctuation.definition.string.end.html",
                regex: /'/,
                next: "pop"
            }, {
                include: "#vue-interpolations"
            }, {
                include: "#entities"
            }, {
                defaultToken: "string.quoted.single.html"
            }]
        }],
        "#tag-generic-attribute": [{
            token: "entity.other.attribute-name.html",
            regex: /\b[a-zA-Z\-:]+/
        }],
        "#tag-id-attribute": [{
            token: [
                "entity.other.attribute-name.id.html",
                "meta.attribute-with-value.id.html",
                "punctuation.separator.key-value.html"
            ],
            regex: /\b(id)\b(\s*)(=)/,
            push: [{
                token: [],
                regex: /(?<='|")/,
                next: "pop"
            }, {
                token: "punctuation.definition.string.begin.html",
                regex: /"/,
                push: [{
                    token: "punctuation.definition.string.end.html",
                    regex: /"/,
                    next: "pop"
                }, {
                    include: "#vue-interpolations"
                }, {
                    include: "#entities"
                }, {
                    defaultToken: "string.quoted.double.html"
                }]
            }, {
                token: "punctuation.definition.string.begin.html",
                regex: /'/,
                push: [{
                    token: "punctuation.definition.string.end.html",
                    regex: /'/,
                    next: "pop"
                }, {
                    include: "#vue-interpolations"
                }, {
                    include: "#entities"
                }, {
                    defaultToken: "string.quoted.single.html"
                }]
            }, {
                defaultToken: "meta.attribute-with-value.id.html"
            }]
        }],
        "#tag-stuff": [{
            include: "#vue-directives"
        }, {
            include: "#tag-id-attribute"
        }, {
            include: "#tag-generic-attribute"
        }, {
            include: "#string-double-quoted"
        }, {
            include: "#string-single-quoted"
        }],
        "#vue-directives": [{
            token: [
                "entity.other.attribute-name.html",
                "punctuation.separator.key-value.html",
                "entity.other.attribute-name.html",
                "meta.directive.vue",
                "entity.other.attribute-name.html",
                "meta.directive.vue",
                "entity.other.attribute-name.html",
                "meta.directive.vue",
                "punctuation.separator.key-value.html"
            ],
            regex: /(?:\b(v-)|(:|@))([a-zA-Z\-]+)(?:(\:)([a-zA-Z\-]+))?(?:(\.)([a-zA-Z\-]+))*(\s*)(=)/,
            push: [{
                token: [],
                regex: /(?<='|")/,
                next: "pop"
            }, {
                token: "punctuation.definition.string.begin.html",
                regex: /"/,
                push: [{
                    token: "punctuation.definition.string.end.html",
                    regex: /"/,
                    next: "pop"
                }, {
                    include: "source.js"
                }, {
                    defaultToken: "source.directive.vue"
                }]
            }, {
                token: "punctuation.definition.string.begin.html",
                regex: /'/,
                push: [{
                    token: "punctuation.definition.string.end.html",
                    regex: /'/,
                    next: "pop"
                }, {
                    include: "source.js"
                }, {
                    defaultToken: "source.directive.vue"
                }]
            }, {
                defaultToken: "meta.directive.vue"
            }]
        }],
        "#vue-interpolations": [{
            token: "punctuation.definition.generic.begin.html",
            regex: /\{\{\{?/,
            push: [{
                token: "punctuation.definition.generic.end.html",
                regex: /\}\}\}?/,
                next: "pop"
            }, {
                include: "source.js"
            }, {
                defaultToken: "expression.embbeded.vue"
            }]
        }]
    }
    
    this.normalizeRules();
};

VueComponentHighlightRules.metaData = {
    fileTypes: ["vue"],
    foldingStartMarker: "(?x)\n(<(?i:head|body|table|thead|tbody|tfoot|tr|div|select|fieldset|style|script|ul|ol|li|form|dl)\\b.*?>\n|<!--(?!.*--\\s*>)\n|^<!--\\ \\#tminclude\\ (?>.*?-->)$\n|<\\?(?:php)?.*\\b(if|for(each)?|while)\\b.+:\n|\\{\\{?(if|foreach|capture|literal|foreach|php|section|strip)\n|\\{\\s*($|\\?>\\s*$|//|/\\*(.*\\*/\\s*$|(?!.*?\\*/)))\n)",
    foldingStopMarker: "(?x)\n(</(?i:head|body|table|thead|tbody|tfoot|tr|div|select|fieldset|style|script|ul|ol|li|form|dl)>\n|^(?!.*?<!--).*?--\\s*>\n|^<!--\\ end\\ tminclude\\ -->$\n|<\\?(?:php)?.*\\bend(if|for(each)?|while)\\b\n|\\{\\{?/(if|foreach|capture|literal|foreach|php|section|strip)\n|^[^{]*\\}\n)",
    keyEquivalent: "^~H",
    name: "Vue Component",
    scopeName: "text.html.vue"
}


oop.inherits(VueComponentHighlightRules, TextHighlightRules);

exports.VueComponentHighlightRules = VueComponentHighlightRules;
});